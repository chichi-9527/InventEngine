#include "IEpch.h"
#include "IWindow.h"

#include "Renderer/IRenderer.h"
#include "Renderer/IRenderer2D.h"

#include "IPhysicsCollision//ICollisionPresets.h"

#include "IEngine.h"


namespace INVENT
{
	void framebuffer_size_callback(GLFWwindow* window, int width, int height)
	{
		IWindow* iwindow = static_cast<IWindow*>(glfwGetWindowUserPointer(window));
#ifdef USE_OPENGL
		glViewport(0, 0, width, height);
#endif // USE_OPENGL
		if (iwindow)
		{
			iwindow->Width = width;
			iwindow->Height = height;

			iwindow->_window_size_change();
		}
	}

#define CALLPRESSEVENT(GLFW_KEY, EVENT_FUNC_NAME)	if (key == GLFW_KEY){	\
		for (auto iter = iwindow->Level->_event_layers.rbegin(); iter != iwindow->Level->_event_layers.rend(); ++iter){	\
			auto takeoff = (*iter)->PRESS_##EVENT_FUNC_NAME();	\
			if (takeoff) break;	}}

#define CALLRELEASEEVENT(GLFW_KEY, EVENT_FUNC_NAME)	if (key == GLFW_KEY){	\
		for (auto iter = iwindow->Level->_event_layers.rbegin(); iter != iwindow->Level->_event_layers.rend(); ++iter){	\
			auto takeoff = (*iter)->RELEASE_##EVENT_FUNC_NAME();	\
			if (takeoff) break;	}}

	void register_key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
	{
		IWindow* iwindow = static_cast<IWindow*>(glfwGetWindowUserPointer(window));
		if (iwindow)
		{
			if (action == GLFW_PRESS)
			{
				CALLPRESSEVENT(GLFW_KEY_SPACE, EVENT_KEY_SPACE);
				CALLPRESSEVENT(GLFW_KEY_APOSTROPHE, EVENT_KEY_APOSTROPHE);
				CALLPRESSEVENT(GLFW_KEY_COMMA, EVENT_KEY_COMMA);
				CALLPRESSEVENT(GLFW_KEY_MINUS, EVENT_KEY_MINUS);
				CALLPRESSEVENT(GLFW_KEY_PERIOD, EVENT_KEY_PERIOD);
				CALLPRESSEVENT(GLFW_KEY_SLASH, EVENT_KEY_SLASH);
				CALLPRESSEVENT(GLFW_KEY_0, EVENT_KEY_0);
				CALLPRESSEVENT(GLFW_KEY_1, EVENT_KEY_1);
				CALLPRESSEVENT(GLFW_KEY_2, EVENT_KEY_2);
				CALLPRESSEVENT(GLFW_KEY_3, EVENT_KEY_3);
				CALLPRESSEVENT(GLFW_KEY_4, EVENT_KEY_4);
				CALLPRESSEVENT(GLFW_KEY_5, EVENT_KEY_5);
				CALLPRESSEVENT(GLFW_KEY_6, EVENT_KEY_6);
				CALLPRESSEVENT(GLFW_KEY_7, EVENT_KEY_7);
				CALLPRESSEVENT(GLFW_KEY_8, EVENT_KEY_8);
				CALLPRESSEVENT(GLFW_KEY_9, EVENT_KEY_9);
				CALLPRESSEVENT(GLFW_KEY_SEMICOLON, EVENT_KEY_SEMICOLON);
				CALLPRESSEVENT(GLFW_KEY_EQUAL, EVENT_KEY_EQUAL);
				CALLPRESSEVENT(GLFW_KEY_A, EVENT_KEY_A);
				CALLPRESSEVENT(GLFW_KEY_B, EVENT_KEY_B);
				CALLPRESSEVENT(GLFW_KEY_C, EVENT_KEY_C);
				CALLPRESSEVENT(GLFW_KEY_D, EVENT_KEY_D);
				CALLPRESSEVENT(GLFW_KEY_E, EVENT_KEY_E);
				CALLPRESSEVENT(GLFW_KEY_F, EVENT_KEY_F);
				CALLPRESSEVENT(GLFW_KEY_G, EVENT_KEY_G);
				CALLPRESSEVENT(GLFW_KEY_H, EVENT_KEY_H);
				CALLPRESSEVENT(GLFW_KEY_I, EVENT_KEY_I);
				CALLPRESSEVENT(GLFW_KEY_J, EVENT_KEY_J);
				CALLPRESSEVENT(GLFW_KEY_K, EVENT_KEY_K);
				CALLPRESSEVENT(GLFW_KEY_L, EVENT_KEY_L);
				CALLPRESSEVENT(GLFW_KEY_M, EVENT_KEY_M);
				CALLPRESSEVENT(GLFW_KEY_N, EVENT_KEY_N);
				CALLPRESSEVENT(GLFW_KEY_O, EVENT_KEY_O);
				CALLPRESSEVENT(GLFW_KEY_P, EVENT_KEY_P);
				CALLPRESSEVENT(GLFW_KEY_Q, EVENT_KEY_Q);
				CALLPRESSEVENT(GLFW_KEY_R, EVENT_KEY_R);
				CALLPRESSEVENT(GLFW_KEY_S, EVENT_KEY_S);
				CALLPRESSEVENT(GLFW_KEY_T, EVENT_KEY_T);
				CALLPRESSEVENT(GLFW_KEY_U, EVENT_KEY_U);
				CALLPRESSEVENT(GLFW_KEY_V, EVENT_KEY_V);
				CALLPRESSEVENT(GLFW_KEY_W, EVENT_KEY_W);
				CALLPRESSEVENT(GLFW_KEY_X, EVENT_KEY_X);
				CALLPRESSEVENT(GLFW_KEY_Y, EVENT_KEY_Y);
				CALLPRESSEVENT(GLFW_KEY_Z, EVENT_KEY_Z);
				CALLPRESSEVENT(GLFW_KEY_LEFT_BRACKET, EVENT_KEY_LEFT_BRACKET);
				CALLPRESSEVENT(GLFW_KEY_BACKSLASH, EVENT_KEY_BACKSLASH);
				CALLPRESSEVENT(GLFW_KEY_RIGHT_BRACKET, EVENT_KEY_RIGHT_BRACKET);
				CALLPRESSEVENT(GLFW_KEY_GRAVE_ACCENT, EVENT_KEY_GRAVE_ACCENT);
				CALLPRESSEVENT(GLFW_KEY_WORLD_1, EVENT_KEY_WORLD_1);
				CALLPRESSEVENT(GLFW_KEY_WORLD_2, EVENT_KEY_WORLD_2);
				CALLPRESSEVENT(GLFW_KEY_ESCAPE, EVENT_KEY_ESCAPE);
				CALLPRESSEVENT(GLFW_KEY_ENTER, EVENT_KEY_ENTER);
				CALLPRESSEVENT(GLFW_KEY_TAB, EVENT_KEY_TAB);
				CALLPRESSEVENT(GLFW_KEY_BACKSPACE, EVENT_KEY_BACKSPACE);
				CALLPRESSEVENT(GLFW_KEY_INSERT, EVENT_KEY_INSERT);
				CALLPRESSEVENT(GLFW_KEY_DELETE, EVENT_KEY_DELETE);
				CALLPRESSEVENT(GLFW_KEY_RIGHT, EVENT_KEY_RIGHT);
				CALLPRESSEVENT(GLFW_KEY_LEFT, EVENT_KEY_LEFT);
				CALLPRESSEVENT(GLFW_KEY_DOWN, EVENT_KEY_DOWN);
				CALLPRESSEVENT(GLFW_KEY_UP, EVENT_KEY_UP);
				CALLPRESSEVENT(GLFW_KEY_PAGE_UP, EVENT_KEY_PAGE_UP);
				CALLPRESSEVENT(GLFW_KEY_PAGE_DOWN, EVENT_KEY_PAGE_DOWN);
				CALLPRESSEVENT(GLFW_KEY_HOME, EVENT_KEY_HOME);
				CALLPRESSEVENT(GLFW_KEY_END, EVENT_KEY_END);
				CALLPRESSEVENT(GLFW_KEY_CAPS_LOCK, EVENT_KEY_CAPS_LOCK);
				CALLPRESSEVENT(GLFW_KEY_SCROLL_LOCK, EVENT_KEY_SCROLL_LOCK);
				CALLPRESSEVENT(GLFW_KEY_NUM_LOCK, EVENT_KEY_NUM_LOCK);
				CALLPRESSEVENT(GLFW_KEY_PRINT_SCREEN, EVENT_KEY_PRINT_SCREEN);
				CALLPRESSEVENT(GLFW_KEY_PAUSE, EVENT_KEY_PAUSE);
				CALLPRESSEVENT(GLFW_KEY_F1, EVENT_KEY_F1);
				CALLPRESSEVENT(GLFW_KEY_F2, EVENT_KEY_F2);
				CALLPRESSEVENT(GLFW_KEY_F3, EVENT_KEY_F3);
				CALLPRESSEVENT(GLFW_KEY_F4, EVENT_KEY_F4);
				CALLPRESSEVENT(GLFW_KEY_F5, EVENT_KEY_F5);
				CALLPRESSEVENT(GLFW_KEY_F6, EVENT_KEY_F6);
				CALLPRESSEVENT(GLFW_KEY_F7, EVENT_KEY_F7);
				CALLPRESSEVENT(GLFW_KEY_F8, EVENT_KEY_F8);
				CALLPRESSEVENT(GLFW_KEY_F9, EVENT_KEY_F9);
				CALLPRESSEVENT(GLFW_KEY_F10, EVENT_KEY_F10);
				CALLPRESSEVENT(GLFW_KEY_F11, EVENT_KEY_F11);
				CALLPRESSEVENT(GLFW_KEY_F12, EVENT_KEY_F12);
				CALLPRESSEVENT(GLFW_KEY_F13, EVENT_KEY_F13);
				CALLPRESSEVENT(GLFW_KEY_F14, EVENT_KEY_F14);
				CALLPRESSEVENT(GLFW_KEY_F15, EVENT_KEY_F15);
				CALLPRESSEVENT(GLFW_KEY_F16, EVENT_KEY_F16);
				CALLPRESSEVENT(GLFW_KEY_F17, EVENT_KEY_F17);
				CALLPRESSEVENT(GLFW_KEY_F18, EVENT_KEY_F18);
				CALLPRESSEVENT(GLFW_KEY_F19, EVENT_KEY_F19);
				CALLPRESSEVENT(GLFW_KEY_F20, EVENT_KEY_F20);
				CALLPRESSEVENT(GLFW_KEY_F21, EVENT_KEY_F21);
				CALLPRESSEVENT(GLFW_KEY_F22, EVENT_KEY_F22);
				CALLPRESSEVENT(GLFW_KEY_F23, EVENT_KEY_F23);
				CALLPRESSEVENT(GLFW_KEY_F24, EVENT_KEY_F24);
				CALLPRESSEVENT(GLFW_KEY_F25, EVENT_KEY_F25);
				CALLPRESSEVENT(GLFW_KEY_KP_0, EVENT_KEY_KP_0);
				CALLPRESSEVENT(GLFW_KEY_KP_1, EVENT_KEY_KP_1);
				CALLPRESSEVENT(GLFW_KEY_KP_2, EVENT_KEY_KP_2);
				CALLPRESSEVENT(GLFW_KEY_KP_3, EVENT_KEY_KP_3);
				CALLPRESSEVENT(GLFW_KEY_KP_4, EVENT_KEY_KP_4);
				CALLPRESSEVENT(GLFW_KEY_KP_5, EVENT_KEY_KP_5);
				CALLPRESSEVENT(GLFW_KEY_KP_6, EVENT_KEY_KP_6);
				CALLPRESSEVENT(GLFW_KEY_KP_7, EVENT_KEY_KP_7);
				CALLPRESSEVENT(GLFW_KEY_KP_8, EVENT_KEY_KP_8);
				CALLPRESSEVENT(GLFW_KEY_KP_9, EVENT_KEY_KP_9);
				CALLPRESSEVENT(GLFW_KEY_KP_DECIMAL, EVENT_KEY_KP_DECIMAL);
				CALLPRESSEVENT(GLFW_KEY_KP_DIVIDE, EVENT_KEY_KP_DIVIDE);
				CALLPRESSEVENT(GLFW_KEY_KP_MULTIPLY, EVENT_KEY_KP_MULTIPLY);
				CALLPRESSEVENT(GLFW_KEY_KP_SUBTRACT, EVENT_KEY_KP_SUBTRACT);
				CALLPRESSEVENT(GLFW_KEY_KP_ADD, EVENT_KEY_KP_ADD);
				CALLPRESSEVENT(GLFW_KEY_KP_ENTER, EVENT_KEY_KP_ENTER);
				CALLPRESSEVENT(GLFW_KEY_KP_EQUAL, EVENT_KEY_KP_EQUAL);
				CALLPRESSEVENT(GLFW_KEY_LEFT_SHIFT, EVENT_KEY_LEFT_SHIFT);
				CALLPRESSEVENT(GLFW_KEY_LEFT_CONTROL, EVENT_KEY_LEFT_CONTROL);
				CALLPRESSEVENT(GLFW_KEY_LEFT_ALT, EVENT_KEY_LEFT_ALT);
				CALLPRESSEVENT(GLFW_KEY_LEFT_SUPER, EVENT_KEY_LEFT_SUPER);
				CALLPRESSEVENT(GLFW_KEY_RIGHT_SHIFT, EVENT_KEY_RIGHT_SHIFT);
				CALLPRESSEVENT(GLFW_KEY_RIGHT_CONTROL, EVENT_KEY_RIGHT_CONTROL);
				CALLPRESSEVENT(GLFW_KEY_RIGHT_ALT, EVENT_KEY_RIGHT_ALT);
				CALLPRESSEVENT(GLFW_KEY_RIGHT_SUPER, EVENT_KEY_RIGHT_SUPER);
				CALLPRESSEVENT(GLFW_KEY_MENU, EVENT_KEY_MENU);
			}
			else if (action == GLFW_RELEASE)
			{
				CALLRELEASEEVENT(GLFW_KEY_SPACE, EVENT_KEY_SPACE);
				CALLRELEASEEVENT(GLFW_KEY_APOSTROPHE, EVENT_KEY_APOSTROPHE);
				CALLRELEASEEVENT(GLFW_KEY_COMMA, EVENT_KEY_COMMA);
				CALLRELEASEEVENT(GLFW_KEY_MINUS, EVENT_KEY_MINUS);
				CALLRELEASEEVENT(GLFW_KEY_PERIOD, EVENT_KEY_PERIOD);
				CALLRELEASEEVENT(GLFW_KEY_SLASH, EVENT_KEY_SLASH);
				CALLRELEASEEVENT(GLFW_KEY_0, EVENT_KEY_0);
				CALLRELEASEEVENT(GLFW_KEY_1, EVENT_KEY_1);
				CALLRELEASEEVENT(GLFW_KEY_2, EVENT_KEY_2);
				CALLRELEASEEVENT(GLFW_KEY_3, EVENT_KEY_3);
				CALLRELEASEEVENT(GLFW_KEY_4, EVENT_KEY_4);
				CALLRELEASEEVENT(GLFW_KEY_5, EVENT_KEY_5);
				CALLRELEASEEVENT(GLFW_KEY_6, EVENT_KEY_6);
				CALLRELEASEEVENT(GLFW_KEY_7, EVENT_KEY_7);
				CALLRELEASEEVENT(GLFW_KEY_8, EVENT_KEY_8);
				CALLRELEASEEVENT(GLFW_KEY_9, EVENT_KEY_9);
				CALLRELEASEEVENT(GLFW_KEY_SEMICOLON, EVENT_KEY_SEMICOLON);
				CALLRELEASEEVENT(GLFW_KEY_EQUAL, EVENT_KEY_EQUAL);
				CALLRELEASEEVENT(GLFW_KEY_A, EVENT_KEY_A);
				CALLRELEASEEVENT(GLFW_KEY_B, EVENT_KEY_B);
				CALLRELEASEEVENT(GLFW_KEY_C, EVENT_KEY_C);
				CALLRELEASEEVENT(GLFW_KEY_D, EVENT_KEY_D);
				CALLRELEASEEVENT(GLFW_KEY_E, EVENT_KEY_E);
				CALLRELEASEEVENT(GLFW_KEY_F, EVENT_KEY_F);
				CALLRELEASEEVENT(GLFW_KEY_G, EVENT_KEY_G);
				CALLRELEASEEVENT(GLFW_KEY_H, EVENT_KEY_H);
				CALLRELEASEEVENT(GLFW_KEY_I, EVENT_KEY_I);
				CALLRELEASEEVENT(GLFW_KEY_J, EVENT_KEY_J);
				CALLRELEASEEVENT(GLFW_KEY_K, EVENT_KEY_K);
				CALLRELEASEEVENT(GLFW_KEY_L, EVENT_KEY_L);
				CALLRELEASEEVENT(GLFW_KEY_M, EVENT_KEY_M);
				CALLRELEASEEVENT(GLFW_KEY_N, EVENT_KEY_N);
				CALLRELEASEEVENT(GLFW_KEY_O, EVENT_KEY_O);
				CALLRELEASEEVENT(GLFW_KEY_P, EVENT_KEY_P);
				CALLRELEASEEVENT(GLFW_KEY_Q, EVENT_KEY_Q);
				CALLRELEASEEVENT(GLFW_KEY_R, EVENT_KEY_R);
				CALLRELEASEEVENT(GLFW_KEY_S, EVENT_KEY_S);
				CALLRELEASEEVENT(GLFW_KEY_T, EVENT_KEY_T);
				CALLRELEASEEVENT(GLFW_KEY_U, EVENT_KEY_U);
				CALLRELEASEEVENT(GLFW_KEY_V, EVENT_KEY_V);
				CALLRELEASEEVENT(GLFW_KEY_W, EVENT_KEY_W);
				CALLRELEASEEVENT(GLFW_KEY_X, EVENT_KEY_X);
				CALLRELEASEEVENT(GLFW_KEY_Y, EVENT_KEY_Y);
				CALLRELEASEEVENT(GLFW_KEY_Z, EVENT_KEY_Z);
				CALLRELEASEEVENT(GLFW_KEY_LEFT_BRACKET, EVENT_KEY_LEFT_BRACKET);
				CALLRELEASEEVENT(GLFW_KEY_BACKSLASH, EVENT_KEY_BACKSLASH);
				CALLRELEASEEVENT(GLFW_KEY_RIGHT_BRACKET, EVENT_KEY_RIGHT_BRACKET);
				CALLRELEASEEVENT(GLFW_KEY_GRAVE_ACCENT, EVENT_KEY_GRAVE_ACCENT);
				CALLRELEASEEVENT(GLFW_KEY_WORLD_1, EVENT_KEY_WORLD_1);
				CALLRELEASEEVENT(GLFW_KEY_WORLD_2, EVENT_KEY_WORLD_2);
				CALLRELEASEEVENT(GLFW_KEY_ESCAPE, EVENT_KEY_ESCAPE);
				CALLRELEASEEVENT(GLFW_KEY_ENTER, EVENT_KEY_ENTER);
				CALLRELEASEEVENT(GLFW_KEY_TAB, EVENT_KEY_TAB);
				CALLRELEASEEVENT(GLFW_KEY_BACKSPACE, EVENT_KEY_BACKSPACE);
				CALLRELEASEEVENT(GLFW_KEY_INSERT, EVENT_KEY_INSERT);
				CALLRELEASEEVENT(GLFW_KEY_DELETE, EVENT_KEY_DELETE);
				CALLRELEASEEVENT(GLFW_KEY_RIGHT, EVENT_KEY_RIGHT);
				CALLRELEASEEVENT(GLFW_KEY_LEFT, EVENT_KEY_LEFT);
				CALLRELEASEEVENT(GLFW_KEY_DOWN, EVENT_KEY_DOWN);
				CALLRELEASEEVENT(GLFW_KEY_UP, EVENT_KEY_UP);
				CALLRELEASEEVENT(GLFW_KEY_PAGE_UP, EVENT_KEY_PAGE_UP);
				CALLRELEASEEVENT(GLFW_KEY_PAGE_DOWN, EVENT_KEY_PAGE_DOWN);
				CALLRELEASEEVENT(GLFW_KEY_HOME, EVENT_KEY_HOME);
				CALLRELEASEEVENT(GLFW_KEY_END, EVENT_KEY_END);
				CALLRELEASEEVENT(GLFW_KEY_CAPS_LOCK, EVENT_KEY_CAPS_LOCK);
				CALLRELEASEEVENT(GLFW_KEY_SCROLL_LOCK, EVENT_KEY_SCROLL_LOCK);
				CALLRELEASEEVENT(GLFW_KEY_NUM_LOCK, EVENT_KEY_NUM_LOCK);
				CALLRELEASEEVENT(GLFW_KEY_PRINT_SCREEN, EVENT_KEY_PRINT_SCREEN);
				CALLRELEASEEVENT(GLFW_KEY_PAUSE, EVENT_KEY_PAUSE);
				CALLRELEASEEVENT(GLFW_KEY_F1, EVENT_KEY_F1);
				CALLRELEASEEVENT(GLFW_KEY_F2, EVENT_KEY_F2);
				CALLRELEASEEVENT(GLFW_KEY_F3, EVENT_KEY_F3);
				CALLRELEASEEVENT(GLFW_KEY_F4, EVENT_KEY_F4);
				CALLRELEASEEVENT(GLFW_KEY_F5, EVENT_KEY_F5);
				CALLRELEASEEVENT(GLFW_KEY_F6, EVENT_KEY_F6);
				CALLRELEASEEVENT(GLFW_KEY_F7, EVENT_KEY_F7);
				CALLRELEASEEVENT(GLFW_KEY_F8, EVENT_KEY_F8);
				CALLRELEASEEVENT(GLFW_KEY_F9, EVENT_KEY_F9);
				CALLRELEASEEVENT(GLFW_KEY_F10, EVENT_KEY_F10);
				CALLRELEASEEVENT(GLFW_KEY_F11, EVENT_KEY_F11);
				CALLRELEASEEVENT(GLFW_KEY_F12, EVENT_KEY_F12);
				CALLRELEASEEVENT(GLFW_KEY_F13, EVENT_KEY_F13);
				CALLRELEASEEVENT(GLFW_KEY_F14, EVENT_KEY_F14);
				CALLRELEASEEVENT(GLFW_KEY_F15, EVENT_KEY_F15);
				CALLRELEASEEVENT(GLFW_KEY_F16, EVENT_KEY_F16);
				CALLRELEASEEVENT(GLFW_KEY_F17, EVENT_KEY_F17);
				CALLRELEASEEVENT(GLFW_KEY_F18, EVENT_KEY_F18);
				CALLRELEASEEVENT(GLFW_KEY_F19, EVENT_KEY_F19);
				CALLRELEASEEVENT(GLFW_KEY_F20, EVENT_KEY_F20);
				CALLRELEASEEVENT(GLFW_KEY_F21, EVENT_KEY_F21);
				CALLRELEASEEVENT(GLFW_KEY_F22, EVENT_KEY_F22);
				CALLRELEASEEVENT(GLFW_KEY_F23, EVENT_KEY_F23);
				CALLRELEASEEVENT(GLFW_KEY_F24, EVENT_KEY_F24);
				CALLRELEASEEVENT(GLFW_KEY_F25, EVENT_KEY_F25);
				CALLRELEASEEVENT(GLFW_KEY_KP_0, EVENT_KEY_KP_0);
				CALLRELEASEEVENT(GLFW_KEY_KP_1, EVENT_KEY_KP_1);
				CALLRELEASEEVENT(GLFW_KEY_KP_2, EVENT_KEY_KP_2);
				CALLRELEASEEVENT(GLFW_KEY_KP_3, EVENT_KEY_KP_3);
				CALLRELEASEEVENT(GLFW_KEY_KP_4, EVENT_KEY_KP_4);
				CALLRELEASEEVENT(GLFW_KEY_KP_5, EVENT_KEY_KP_5);
				CALLRELEASEEVENT(GLFW_KEY_KP_6, EVENT_KEY_KP_6);
				CALLRELEASEEVENT(GLFW_KEY_KP_7, EVENT_KEY_KP_7);
				CALLRELEASEEVENT(GLFW_KEY_KP_8, EVENT_KEY_KP_8);
				CALLRELEASEEVENT(GLFW_KEY_KP_9, EVENT_KEY_KP_9);
				CALLRELEASEEVENT(GLFW_KEY_KP_DECIMAL, EVENT_KEY_KP_DECIMAL);
				CALLRELEASEEVENT(GLFW_KEY_KP_DIVIDE, EVENT_KEY_KP_DIVIDE);
				CALLRELEASEEVENT(GLFW_KEY_KP_MULTIPLY, EVENT_KEY_KP_MULTIPLY);
				CALLRELEASEEVENT(GLFW_KEY_KP_SUBTRACT, EVENT_KEY_KP_SUBTRACT);
				CALLRELEASEEVENT(GLFW_KEY_KP_ADD, EVENT_KEY_KP_ADD);
				CALLRELEASEEVENT(GLFW_KEY_KP_ENTER, EVENT_KEY_KP_ENTER);
				CALLRELEASEEVENT(GLFW_KEY_KP_EQUAL, EVENT_KEY_KP_EQUAL);
				CALLRELEASEEVENT(GLFW_KEY_LEFT_SHIFT, EVENT_KEY_LEFT_SHIFT);
				CALLRELEASEEVENT(GLFW_KEY_LEFT_CONTROL, EVENT_KEY_LEFT_CONTROL);
				CALLRELEASEEVENT(GLFW_KEY_LEFT_ALT, EVENT_KEY_LEFT_ALT);
				CALLRELEASEEVENT(GLFW_KEY_LEFT_SUPER, EVENT_KEY_LEFT_SUPER);
				CALLRELEASEEVENT(GLFW_KEY_RIGHT_SHIFT, EVENT_KEY_RIGHT_SHIFT);
				CALLRELEASEEVENT(GLFW_KEY_RIGHT_CONTROL, EVENT_KEY_RIGHT_CONTROL);
				CALLRELEASEEVENT(GLFW_KEY_RIGHT_ALT, EVENT_KEY_RIGHT_ALT);
				CALLRELEASEEVENT(GLFW_KEY_RIGHT_SUPER, EVENT_KEY_RIGHT_SUPER);
				CALLRELEASEEVENT(GLFW_KEY_MENU, EVENT_KEY_MENU);
			}
		}
	}

	IWindow::IWindow(unsigned int width, unsigned int height, std::string title)
		: Width(width)
		, Height(height)
		, Title(title)
		, Window(nullptr)
		, Level(nullptr)
		, delta_time(0.0f)
		, last_frame(0.0f)
	{
		_create();
		_default_level = new IBaseLevel;
		Level = _default_level;

		IEngine::InstancePtr()->SetIWindow(this);

		_threadpool = new IThreadPool();
	}

	IWindow::~IWindow()
	{
		if (_default_level)
			delete _default_level;
		_default_level = nullptr;

		if (_threadpool) _threadpool->Shutdown(); delete _threadpool;
		_threadpool = nullptr;

		glfwTerminate();
	}

	// ----------------------Start--------------------------------------
	void IWindow::Start()
	{
		ICollisionPresets::Init();
		IRenderer::Init();
		_game_instance_ptr->Begin();

		///////////////////////////////////////////////////////////
		////////// Begin Loop
		//////////////////////////////////////////////////////////

		last_frame = static_cast<float>(glfwGetTime());
		while (!glfwWindowShouldClose(Window))
		{
			float current_frame = static_cast<float>(glfwGetTime());
			delta_time = current_frame - last_frame;
			last_frame = current_frame;

			INVENT_LOG_DEBUG(std::to_string(delta_time));

			Level->_clear_color();
			Level->_clear();
			Level->Update(delta_time);

			///////////////////////////////////////////////////////////
			///////////// Render Begin

			IWindow::Render(Level);

			///////////// Render End
			//////////////////////////////////////////////////////////

			_process_input(delta_time);

			_game_instance_ptr->Update(delta_time);

			// 检查并调用事件，交换缓冲
			glfwSwapBuffers(Window);
			glfwPollEvents();
		}

		_game_instance_ptr->End();
		IRenderer::Shutdown();
	}

	void IWindow::SetWindowSize(unsigned int width, unsigned int height) const
	{
		glfwSetWindowSize(Window, (int)width, (int)height);
	}

	void IWindow::Close() const
	{
		glfwSetWindowShouldClose(Window, true);
	}

	void IWindow::SetLevel(IBaseLevel* level)
	{
		if (level)
			Level = level;
	}

	void IWindow::SetGameInstance(std::shared_ptr<IBaseGameInstance> game_instance_ptr)
	{
		_game_instance_ptr = game_instance_ptr;
	}

	// debug
	struct quad_vertex {
		glm::vec3 Position;
		glm::vec4 Color;
		glm::vec2 TexCoord;
		float TexIndex;
	};

	/////////////////////////////////////////////////////////////////////////////////////////////////
	////////////  渲染
	/////////////////////////////////////////////////////////////////////////////////////////////////
	void IWindow::Render(IBaseLevel* level)
	{
		IRenderer2D::BeginRender(level->GetController() ? level->GetController()->GetSceneCamera() : nullptr);
		for (auto square_actor : level->_square_2d_actors)
		{
			IRenderer2D::DrawSquare(square_actor);
		}
		IRenderer2D::EndRender();

		/*IRenderer::BeginRender(level->GetController() ? level->GetController()->GetSceneCamera() : nullptr);
		auto shader = level->_square_2d_actors[0]->GetShader();
		auto vertex_array = IVertexArray::CreatePtr();
		
		unsigned int indices[] = { 0,1,2,2,3,0 };
		auto index_buffer = IIndexBuffer::CreatePtr(indices, 6);
		vertex_array->SetIndexBuffer(index_buffer);
		constexpr glm::vec2 textureCoords[] = { { 0.0f, 0.0f }, { 1.0f, 0.0f }, { 1.0f, 1.0f }, { 0.0f, 1.0f } };
		auto q_vertexs = new quad_vertex[4];
		glm::vec3 quad_position[4];
		quad_position[0] = { -0.5f, -0.5f, 0.0f };
		quad_position[1] = { 0.5f, -0.5f, 0.0f };
		quad_position[2] = { 0.5f, 0.5f, 0.0f };
		quad_position[3] = { -0.5f, 0.5f, 0.0f };
		for (size_t i = 0; i < 4; ++i)
		{
			q_vertexs[i].Position = level->_square_2d_actors[0]->GetWorldPosition() + quad_position[i];
			q_vertexs[i].Color = level->_square_2d_actors[0]->GetColor();
			q_vertexs[i].TexCoord = textureCoords[i];
			q_vertexs[i].TexIndex = 1;
		}
		level->_square_2d_actors[0]->GetTexture()->BindUnit(1);
		auto vertex_buffer = IVertexBuffer::CreatePtr((float*)q_vertexs, 4 * sizeof(quad_vertex));
		vertex_buffer->SetLayout({
			{IShaderDataType::Float3, "a_Position"},
			{IShaderDataType::Float4, "a_Color"},
			{IShaderDataType::Float2, "a_TexCoord"},
			{IShaderDataType::Float, "a_TexIndex"}
			});
		vertex_array->AddVertexBuffer(vertex_buffer);

		IRenderer::Submit(shader, vertex_array);
		IRenderer::EndRender();
		delete[] q_vertexs;*/
	}

	void IWindow::_create()
	{
		if (-1 == _glfw_init())
			return;
		Window = glfwCreateWindow(Width, Height, Title.c_str(), NULL, NULL);
		if (Window)
		{
			glfwMakeContextCurrent(Window);
			glfwSetWindowUserPointer(Window, this);
#ifdef USE_OPENGL
			if (gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
			{
				glViewport(0, 0, Width, Height);
			}
			else
				INVENT_LOG_ERROR("Failed to initialize GLAD");
#endif // USE_OPENGL
			glfwSetFramebufferSizeCallback(Window, framebuffer_size_callback);
			glfwSetKeyCallback(Window, register_key_callback);
			return;
		}
		else
		{
			INVENT_LOG_ERROR("Failed to create GLFW window");
			return;
		}
	}

	int IWindow::_glfw_init()
	{
		if (GLFW_FALSE == glfwInit())
		{
			INVENT_LOG_ERROR("glfwInit() error");
			return -1;
		}
		glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
		glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
#ifdef USE_OPENGL
		glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
#endif // USE_OPENGL
		//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
		return 0;
	}

	void IWindow::_window_size_change()
	{
		Level->_window_size = { (float)Width , (float)Height };
		if (Level->GetController())
		{
			Level->GetController()->UpdateCameraWindowAspect();
		}
	}

#define CALLEVENT(GLFW_KEY, EVENT_FUNC_NAME)	if (glfwGetKey(Window, GLFW_KEY) == (GLFW_PRESS | GLFW_RELEASE)){	\
		for (auto iter = Level->_event_layers.rbegin(); iter != Level->_event_layers.rend(); ++iter){	\
			auto takeoff = (*iter)->EVENT_FUNC_NAME(delta);	\
			if (takeoff) break;	}}

	void IWindow::_process_input(float delta)
	{
		CALLEVENT(GLFW_KEY_SPACE, EVENT_KEY_SPACE);
		CALLEVENT(GLFW_KEY_APOSTROPHE, EVENT_KEY_APOSTROPHE);
		CALLEVENT(GLFW_KEY_COMMA, EVENT_KEY_COMMA);
		CALLEVENT(GLFW_KEY_MINUS, EVENT_KEY_MINUS);
		CALLEVENT(GLFW_KEY_PERIOD, EVENT_KEY_PERIOD);
		CALLEVENT(GLFW_KEY_SLASH, EVENT_KEY_SLASH);
		CALLEVENT(GLFW_KEY_0, EVENT_KEY_0);
		CALLEVENT(GLFW_KEY_1, EVENT_KEY_1);
		CALLEVENT(GLFW_KEY_2, EVENT_KEY_2);
		CALLEVENT(GLFW_KEY_3, EVENT_KEY_3);
		CALLEVENT(GLFW_KEY_4, EVENT_KEY_4);
		CALLEVENT(GLFW_KEY_5, EVENT_KEY_5);
		CALLEVENT(GLFW_KEY_6, EVENT_KEY_6);
		CALLEVENT(GLFW_KEY_7, EVENT_KEY_7);
		CALLEVENT(GLFW_KEY_8, EVENT_KEY_8);
		CALLEVENT(GLFW_KEY_9, EVENT_KEY_9);
		CALLEVENT(GLFW_KEY_SEMICOLON, EVENT_KEY_SEMICOLON);
		CALLEVENT(GLFW_KEY_EQUAL, EVENT_KEY_EQUAL);
		CALLEVENT(GLFW_KEY_A, EVENT_KEY_A);
		CALLEVENT(GLFW_KEY_B, EVENT_KEY_B);
		CALLEVENT(GLFW_KEY_C, EVENT_KEY_C);
		CALLEVENT(GLFW_KEY_D, EVENT_KEY_D);
		CALLEVENT(GLFW_KEY_E, EVENT_KEY_E);
		CALLEVENT(GLFW_KEY_F, EVENT_KEY_F);
		CALLEVENT(GLFW_KEY_G, EVENT_KEY_G);
		CALLEVENT(GLFW_KEY_H, EVENT_KEY_H);
		CALLEVENT(GLFW_KEY_I, EVENT_KEY_I);
		CALLEVENT(GLFW_KEY_J, EVENT_KEY_J);
		CALLEVENT(GLFW_KEY_K, EVENT_KEY_K);
		CALLEVENT(GLFW_KEY_L, EVENT_KEY_L);
		CALLEVENT(GLFW_KEY_M, EVENT_KEY_M);
		CALLEVENT(GLFW_KEY_N, EVENT_KEY_N);
		CALLEVENT(GLFW_KEY_O, EVENT_KEY_O);
		CALLEVENT(GLFW_KEY_P, EVENT_KEY_P);
		CALLEVENT(GLFW_KEY_Q, EVENT_KEY_Q);
		CALLEVENT(GLFW_KEY_R, EVENT_KEY_R);
		CALLEVENT(GLFW_KEY_S, EVENT_KEY_S);
		CALLEVENT(GLFW_KEY_T, EVENT_KEY_T);
		CALLEVENT(GLFW_KEY_U, EVENT_KEY_U);
		CALLEVENT(GLFW_KEY_V, EVENT_KEY_V);
		CALLEVENT(GLFW_KEY_W, EVENT_KEY_W);
		CALLEVENT(GLFW_KEY_X, EVENT_KEY_X);
		CALLEVENT(GLFW_KEY_Y, EVENT_KEY_Y);
		CALLEVENT(GLFW_KEY_Z, EVENT_KEY_Z);
		CALLEVENT(GLFW_KEY_LEFT_BRACKET, EVENT_KEY_LEFT_BRACKET);
		CALLEVENT(GLFW_KEY_BACKSLASH, EVENT_KEY_BACKSLASH);
		CALLEVENT(GLFW_KEY_RIGHT_BRACKET, EVENT_KEY_RIGHT_BRACKET);
		CALLEVENT(GLFW_KEY_GRAVE_ACCENT, EVENT_KEY_GRAVE_ACCENT);
		CALLEVENT(GLFW_KEY_WORLD_1, EVENT_KEY_WORLD_1);
		CALLEVENT(GLFW_KEY_WORLD_2, EVENT_KEY_WORLD_2);
		CALLEVENT(GLFW_KEY_ESCAPE, EVENT_KEY_ESCAPE);
		CALLEVENT(GLFW_KEY_ENTER, EVENT_KEY_ENTER);
		CALLEVENT(GLFW_KEY_TAB, EVENT_KEY_TAB);
		CALLEVENT(GLFW_KEY_BACKSPACE, EVENT_KEY_BACKSPACE);
		CALLEVENT(GLFW_KEY_INSERT, EVENT_KEY_INSERT);
		CALLEVENT(GLFW_KEY_DELETE, EVENT_KEY_DELETE);
		CALLEVENT(GLFW_KEY_RIGHT, EVENT_KEY_RIGHT);
		CALLEVENT(GLFW_KEY_LEFT, EVENT_KEY_LEFT);
		CALLEVENT(GLFW_KEY_DOWN, EVENT_KEY_DOWN);
		CALLEVENT(GLFW_KEY_UP, EVENT_KEY_UP);
		CALLEVENT(GLFW_KEY_PAGE_UP, EVENT_KEY_PAGE_UP);
		CALLEVENT(GLFW_KEY_PAGE_DOWN, EVENT_KEY_PAGE_DOWN);
		CALLEVENT(GLFW_KEY_HOME, EVENT_KEY_HOME);
		CALLEVENT(GLFW_KEY_END, EVENT_KEY_END);
		CALLEVENT(GLFW_KEY_CAPS_LOCK, EVENT_KEY_CAPS_LOCK);
		CALLEVENT(GLFW_KEY_SCROLL_LOCK, EVENT_KEY_SCROLL_LOCK);
		CALLEVENT(GLFW_KEY_NUM_LOCK, EVENT_KEY_NUM_LOCK);
		CALLEVENT(GLFW_KEY_PRINT_SCREEN, EVENT_KEY_PRINT_SCREEN);
		CALLEVENT(GLFW_KEY_PAUSE, EVENT_KEY_PAUSE);
		CALLEVENT(GLFW_KEY_F1, EVENT_KEY_F1);
		CALLEVENT(GLFW_KEY_F2, EVENT_KEY_F2);
		CALLEVENT(GLFW_KEY_F3, EVENT_KEY_F3);
		CALLEVENT(GLFW_KEY_F4, EVENT_KEY_F4);
		CALLEVENT(GLFW_KEY_F5, EVENT_KEY_F5);
		CALLEVENT(GLFW_KEY_F6, EVENT_KEY_F6);
		CALLEVENT(GLFW_KEY_F7, EVENT_KEY_F7);
		CALLEVENT(GLFW_KEY_F8, EVENT_KEY_F8);
		CALLEVENT(GLFW_KEY_F9, EVENT_KEY_F9);
		CALLEVENT(GLFW_KEY_F10, EVENT_KEY_F10);
		CALLEVENT(GLFW_KEY_F11, EVENT_KEY_F11);
		CALLEVENT(GLFW_KEY_F12, EVENT_KEY_F12);
		CALLEVENT(GLFW_KEY_F13, EVENT_KEY_F13);
		CALLEVENT(GLFW_KEY_F14, EVENT_KEY_F14);
		CALLEVENT(GLFW_KEY_F15, EVENT_KEY_F15);
		CALLEVENT(GLFW_KEY_F16, EVENT_KEY_F16);
		CALLEVENT(GLFW_KEY_F17, EVENT_KEY_F17);
		CALLEVENT(GLFW_KEY_F18, EVENT_KEY_F18);
		CALLEVENT(GLFW_KEY_F19, EVENT_KEY_F19);
		CALLEVENT(GLFW_KEY_F20, EVENT_KEY_F20);
		CALLEVENT(GLFW_KEY_F21, EVENT_KEY_F21);
		CALLEVENT(GLFW_KEY_F22, EVENT_KEY_F22);
		CALLEVENT(GLFW_KEY_F23, EVENT_KEY_F23);
		CALLEVENT(GLFW_KEY_F24, EVENT_KEY_F24);
		CALLEVENT(GLFW_KEY_F25, EVENT_KEY_F25);
		CALLEVENT(GLFW_KEY_KP_0, EVENT_KEY_KP_0);
		CALLEVENT(GLFW_KEY_KP_1, EVENT_KEY_KP_1);
		CALLEVENT(GLFW_KEY_KP_2, EVENT_KEY_KP_2);
		CALLEVENT(GLFW_KEY_KP_3, EVENT_KEY_KP_3);
		CALLEVENT(GLFW_KEY_KP_4, EVENT_KEY_KP_4);
		CALLEVENT(GLFW_KEY_KP_5, EVENT_KEY_KP_5);
		CALLEVENT(GLFW_KEY_KP_6, EVENT_KEY_KP_6);
		CALLEVENT(GLFW_KEY_KP_7, EVENT_KEY_KP_7);
		CALLEVENT(GLFW_KEY_KP_8, EVENT_KEY_KP_8);
		CALLEVENT(GLFW_KEY_KP_9, EVENT_KEY_KP_9);
		CALLEVENT(GLFW_KEY_KP_DECIMAL, EVENT_KEY_KP_DECIMAL);
		CALLEVENT(GLFW_KEY_KP_DIVIDE, EVENT_KEY_KP_DIVIDE);
		CALLEVENT(GLFW_KEY_KP_MULTIPLY, EVENT_KEY_KP_MULTIPLY);
		CALLEVENT(GLFW_KEY_KP_SUBTRACT, EVENT_KEY_KP_SUBTRACT);
		CALLEVENT(GLFW_KEY_KP_ADD, EVENT_KEY_KP_ADD);
		CALLEVENT(GLFW_KEY_KP_ENTER, EVENT_KEY_KP_ENTER);
		CALLEVENT(GLFW_KEY_KP_EQUAL, EVENT_KEY_KP_EQUAL);
		CALLEVENT(GLFW_KEY_LEFT_SHIFT, EVENT_KEY_LEFT_SHIFT);
		CALLEVENT(GLFW_KEY_LEFT_CONTROL, EVENT_KEY_LEFT_CONTROL);
		CALLEVENT(GLFW_KEY_LEFT_ALT, EVENT_KEY_LEFT_ALT);
		CALLEVENT(GLFW_KEY_LEFT_SUPER, EVENT_KEY_LEFT_SUPER);
		CALLEVENT(GLFW_KEY_RIGHT_SHIFT, EVENT_KEY_RIGHT_SHIFT);
		CALLEVENT(GLFW_KEY_RIGHT_CONTROL, EVENT_KEY_RIGHT_CONTROL);
		CALLEVENT(GLFW_KEY_RIGHT_ALT, EVENT_KEY_RIGHT_ALT);
		CALLEVENT(GLFW_KEY_RIGHT_SUPER, EVENT_KEY_RIGHT_SUPER);
		CALLEVENT(GLFW_KEY_MENU, EVENT_KEY_MENU);
		
	}
	
}